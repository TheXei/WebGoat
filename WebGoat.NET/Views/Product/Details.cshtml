@model ProductDetailsViewModel
@{
    ViewData["Title"] = "Product Details";
}

<div>
    @if (Model.ErrorMessage != null)
    {
        <!-- Error popup -->
        <div id="errorPopup" class="error-popup">
            <p>@Model.ErrorMessage</p>
            <button onclick="closeErrorPopup()">Close</button>
        </div>
    }
    else
    {
        <div class="productDetail">
            <img src="@Model.ProductImageUrl" alt="@Model.Product.ProductName">
            <br>
            @Model.Product.ProductName
            <br>
            Category: @(Model.Product.Category?.CategoryName ?? "No category")
            <br>
            Unit: @Model.Product.QuantityPerUnit
            <br>
            Price: @Model.Product.DecimalUnitPrice
        </div>
        <div>
            <form asp-controller="Cart" asp-action="AddOrder" asp-route-productId="@Model.Product.ProductId" method="post" id="addOrderForm">
                <label for="Quantity">Quantity:</label>
                <input name="Quantity" type="text" value="@Model.Quantity">
                <input type="submit" value="Add to cart">
            </form>

            <div id="errorPopup" class="error-popup" style="display: none;">
                <p></p>
                <button onclick="closeErrorPopup()">Close</button>
            </div>
        </div>
    }
</div>

<script>
    function closeErrorPopup() {
        const popup = document.getElementById('errorPopup');
        popup.style.display = 'none';
        console.log("Popup hidden:", popup.style.display); // Debug log
    }

    document.addEventListener("DOMContentLoaded", () => {
        async function handleAddToCart(event) {
            event.preventDefault();
            const form = event.target;

            try {
                console.log("Submitting form to URL:", form.action);
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: new URLSearchParams(new FormData(form)),
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });

                if (response.redirected) {
                    console.log("Redirecting to:", response.url);
                    window.location.href = response.url;
                } else if (response.ok) {
                    const result = await response.json();
                    if (result.RedirectUrl) {
                        window.location.href = result.RedirectUrl;
                    } else {
                        alert("Order placed successfully!");
                    }
                } else if (response.status === 400) {
                    const error = await response.json();
                    console.error("Server returned error:", error);
                    showErrorPopup(error.message || "An error occurred.");
                } else {
                    console.error("Unexpected response:", response);
                    showErrorPopup("An unexpected error occurred. Please try again.");
                }
            } catch (err) {
                console.error("Fetch request failed:", err);
                showErrorPopup("Network error. Please check your connection.");
            }
        }

        document.getElementById('addOrderForm').addEventListener('submit', (event) => {
            console.log("Form submission triggered");
            handleAddToCart(event);
        });

        function showErrorPopup(message) {
            const popup = document.getElementById('errorPopup');
            console.log("Popup found:", popup); // Debug log
            popup.querySelector('p').textContent = message;
            popup.style.display = 'block';
        }
    });
</script>

<style>
    .error-popup {
        display: none;
        position: fixed;
        top: 30%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #fff;
        border: 1px solid #ccc;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }

    .error-popup button {
        background: #007bff;
        color: #fff;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
    }

    .error-popup button:hover {
        background: #0056b3;
    }
</style>
